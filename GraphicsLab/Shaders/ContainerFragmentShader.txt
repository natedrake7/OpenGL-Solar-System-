#version 330 core
out vec4 FragColor;

struct Material{
 sampler2D Diffuse;
 sampler2D Specular;
 float Shininess;
};

struct Light{
 vec3 Position;
 
 vec3 Ambient;
 vec3 Diffuse;
 vec3 Specular;

 float Constant;
 float Linear;
 float Quadratic;

};

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

uniform Material material;
uniform Light light;
uniform vec3 ViewPos;

void main()
{	
	//Ambient
	vec3 Ambient = light.Ambient * vec3(texture(material.Diffuse,TexCoords));
	
	//Diffuse
	vec3 Norm = normalize(Normal);
	vec3 LightDir = normalize(light.Position - FragPos);
	float Diff = max(dot(Norm,LightDir),0.0);
	vec3 Diffuse = light.Diffuse * Diff * vec3(texture(material.Diffuse,TexCoords));

	//Specular
	vec3 ViewDir = normalize(ViewPos - FragPos);
	vec3 ReflectDir = reflect(-LightDir,Norm);
	float Spec = pow(max(dot(ViewDir,ReflectDir),0.0),material.Shininess);
	vec3 Specular = light.Specular * Spec * vec3(texture(material.Specular,TexCoords));

	float Distance = length(light.Position - FragPos);
	float Attenuation = 1.0/(light.Constant + light.Linear * Distance + light.Quadratic * (Distance * Distance));

	Ambient *= Attenuation;
	Diffuse *= Attenuation;
	Specular *= Attenuation;

	vec3 Result = Ambient + Diffuse + Specular;
	FragColor = vec4(Result,1.0);
}